---
title: "Project Kalayaan 2 - 100 MW Wind Farm"
subtitle: "Probabilistic & Economic Selection of Step-up Transformers"
date: "`r Sys.Date()`"
author: Jorge Thomas
format:    
    html:
      self-contained: true
      code-fold: true      
      df-print: tibble
      code-summary: "Show the code"
      grid: 
        margin-width: 350px
reference-location: margin 
bibliography: references.bib
---

::: {#fig-intro layout-ncol="1"}
![Credit: Siemens Gamesa](./imgs/Balaoi-Caunayan-Wind-Farm.webp){width="100%"}

The Balaoi & Caunayan Wind Farm is an 160 MW onshore project located in the province of Ilocos Norte, Philippines.
:::

```{r}
#| label: setup
#| include: false
#| warning: false

# library(convertr) # https://cran.r-project.org/web/packages/convertr/convertr.pdf
library(tictoc)
library(tidyverse)
library(corrplot)

library(infotheo)
library(tidymodels)
tidymodels_prefer()
library(glmnet)


source("./tools/jthomfuncs.r")
source("./tools/jthomfuncs_wind.r")

theme_set(jthomggtheme)

# ====== Wind Turbine Specs ======

# Manufacturer: Goldwin
# Model: GW 165-6.0 6300 

# Variable Speed - Variable pitch

wt_rated_power <- 6000 #  [kW]
wt_rated_wind_speed <- 11.4 # [m/s] at standard air density
wt_area <- 21382 # squared metres
wt_hub_height <- 100 # metres
Cp <- 0.45 # Power Coefficient
wt_rotor_diam <- 165 # metres

wt_ws_cut_in <- 3 # m/s
wt_ws_cut_out <- 24 # m/s

# Speed Range During Power Production
wt_min_speed <- 5.5  # [RPM]
wt_max_speed <- 10.7  # [RPM] Nominal

#' Tip speed of blade 
#' Linear speed of blade tip for Tip-Speed Ratio (lambda) calc.
wt_min_tip_speed <- 2*pi * (wt_min_speed/60) * (wt_rotor_diam/2) # [m/s]
wt_max_tip_speed <- 2*pi * (wt_max_speed/60) * (wt_rotor_diam/2) # [m/s] Nominal

# wt_max_tip_speed <- 92 # [m/s] # From Specs.

# ====== Onshore Wind Park =======

n_wind_turbines <- 16
installed_capacity <- (n_wind_turbines * wt_rated_power) / 1000 # [MW]

# ====== Costs and Energy Prices =======

# Energy
USD_per_kWh <- 0.085 

# Tx
USD_per_MVA <- 15000 # USD/MVA

# Total Substation: 10 MUSD

```

# On-Site Wind Profile

On June the 30<sup>th</sup> of 2021 started the measuring campaign for collecting on-site wind speed and other important weather-related variables with a 10-min step resolution.

There are 61 variables named:

```{r}
#| label: extract
#| echo: false
#| warning: false
#| output: true

klywind <- read_csv("./data/metmast_01_21-months.csv", show_col_types = FALSE)

klywind <- 
    klywind |>
    rename_with(~ str_remove_all(., "\\[.*\\]|\\s+")) |>
    rename_with(~ str_replace_all(., "-", "_" )) |>
    slice(-(1:50)) # Start exactly at 2021-07-01 00:00

klywind |>
    select(-datetime)|>
    colnames()
```

`Speed120msyn`, `Speed110msyn` and `WS120mCompFILLED120mSyn` seem to be artificially generated (synthetic).

Abbreviations of the original sensor data indicate the following:

-   WS: Wind Speed \[m/s\]
-   PR: Pressure \[mbar\]
-   WD: Wind Direction \[°\]
-   RH: Relative Humidity \[%\]
-   TEM: Ambient Temperature \[°C\]

## Check Data Integrity: Missing Values

```{r}
#| label: missing_values
#| echo: false
#| warning: false
#| output: true

klywind |>
    count_na() |>
    knitr::kable()
```

Only `WS120mCompFILLED120mSyn` is complete, which makes sense given that it was synthetically created with unkown methods.

If calculations are done at 120 metres, the theoretical wind power output will be overestimated.

Mastils of wind turbines are 100 metres high. However, with a rotor diameter of 165 metres the total height from blade tip is 182.92 metres.

The minimum distance from tip to ground would be $100 - 82.5 = 17.5 m$.

This means that the best measurement of wind speed (ws) for the total **air parcel** is the Avg. of all sensors installed at different heights.

### Wind Speed - Raw Data

```{r}
#| label: raw_plot_ws
#| echo: false
#| warning: false
#| output: true
#| fig-width: 6
#| fig-height: 6

klywind |> 
    select(datetime | contains("WS") & !contains(c("Min", "Max", "STDev", "TI30"))) |> 
    pivot_longer(cols = contains("WS"), names_to = "WS_sensor", values_to = "WindSpeed") |>
    mutate(WS_sensor = as.factor(WS_sensor)) |>
    ggplot(aes(x = datetime)) +
    geom_line(aes(y = WindSpeed)) +     
    scale_x_datetime(date_labels = "%b-%Y") + 
    labs(y = "Wind\nSpeed\n[m/s]", x = "Time" ) +
    facet_wrap(~WS_sensor, ncol = 1)
```

### Wind Direction - Raw Data

```{r}
#| label: ts_plots
#| echo: false
#| warning: false
#| output: true
#| fig-width: 6
#| fig-height: 6

klywind |> 
    select(datetime | contains("WD") & !contains(c("Min", "Max", "STDev", "TI30"))) |> 
    pivot_longer(cols = contains("WD"), names_to = "WD_sensor", values_to = "WindDirection") |>
    mutate(WD_sensor = as.factor(WD_sensor)) |>
    ggplot(aes(x=datetime)) +
    geom_line(aes(y=WindDirection)) +     
    scale_x_datetime(date_labels = "%b-%Y") + 
    labs(y = "Wind\nDirection\n[Deg.]", x = "Time" ) +
    facet_wrap(~WD_sensor, ncol = 1) 

# Definitive ready for Wind Rose Plot:

wd <-
    klywind |> 
    select(datetime | contains("WD") & !contains(c("Min", "Max", "STDev"))) |>
    slice(-(1:77)) |>
    mutate(A2_WD_97_150_0_5V = coalesce(A2_WD_97_150_0_5V, A3_WD_57_150_0_5V), .keep = "all") |>
    mutate(A1_WD_117_150_0_5V = coalesce(A1_WD_117_150_0_5V, A2_WD_97_150_0_5V), .keep = "all") |>
    mutate(wd = (A3_WD_57_150_0_5V + A2_WD_97_150_0_5V + A1_WD_117_150_0_5V)/3, .keep = "all") |>
    select(c(datetime, wd))

```

There is high correlation between the three sensors. Use the one with full data: `A3_WD_57_150_0_5V` (Only 0.77 % missing values)

### Temperature - Raw Data

```{r}
#| label: ts_plots
#| echo: false
#| warning: false
#| output: true
#| fig-width: 6
#| fig-height: 6
#| eval: false

klywind |> 
    select(datetime | contains("TEM") & !contains(c("Min", "Max", "STDev", "TI30"))) |> 
    pivot_longer(cols = contains("TEM"), names_to = "TEM_sensor", values_to = "Temperature") |>
    mutate(TEM_sensor = as.factor(TEM_sensor)) |>
    ggplot(aes(x=datetime)) +
    geom_line(aes(y=Temperature)) +     
    scale_x_datetime(date_labels = "%b-%Y") + 
    labs(y = "Temp\n[degC]", x = "Time" ) +
    facet_wrap(~TEM_sensor, ncol = 1) 

```

### Pressure - Raw Data

```{r}
#| label: ts_plots
#| echo: false
#| warning: false
#| output: true
#| fig-width: 6
#| fig-height: 6
#| eval: false

klywind |> 
    select(datetime | contains("PR") & !contains(c("Min", "Max", "STDev", "TI30"))) |> 
    pivot_longer(cols = contains("PR"), names_to = "PR_sensor", values_to = "Pressure") |>
    mutate(PR_sensor = as.factor(PR_sensor)) |>
    ggplot(aes(x=datetime)) +
    geom_line(aes(y=Pressure)) +     
    scale_x_datetime(date_labels = "%b-%Y") + 
    labs(y = "Pressure\n[mbar]", x = "Time" ) +
    facet_wrap(~PR_sensor, ncol = 1) 
```

### Relative Humidity - Raw Data

```{r}
#| label: ts_plots
#| echo: false
#| warning: false
#| output: true
#| fig-width: 6
#| fig-height: 6
#| eval: false

klywind |> 
    select(datetime | contains("RH") & !contains(c("Min", "Max", "STDev", "TI30"))) |> 
    pivot_longer(cols = contains("RH"), names_to = "RH_sensor", values_to = "rh") |>
    mutate(RH_sensor = as.factor(RH_sensor)) |>
    ggplot(aes(x=datetime)) +
    geom_line(aes(y=rh)) +     
    scale_x_datetime(date_labels = "%b-%Y") + 
    labs(y = "RH\n[%]", x = "Time" ) +
    facet_wrap(~RH_sensor, ncol = 1) 
```

### General Overview and Correlations

```{r}
#| label: coalesce_rm_outliers 

rdxklywind <- 
    klywind |> 
    select(datetime | !contains(c("WD", "Min", "Max", "STDev", "TI30", "Syn"))) |>
    mutate(ws_120 = coalesce(F2_WS_120_B_150_TFCA, F1_WS_120_A_330_TFCA), .keep = "unused") |> 
    mutate(ws_100 = coalesce(F3_WS_100_A_330_TFCA, F4_WS_100_B_150_TFCA), .keep = "unused") |> 
    mutate(ws_060 = coalesce(F6_WS_60_B_150_TFCA, F5_WS_60_A_330_TFCA), .keep = "unused") |> 
    mutate(pr = ifelse(F7_PR_7_0_K611PB < 890, NA, F7_PR_7_0_K611PB), .keep = "unused") |>
    mutate(pr = ifelse(pr < 931 & datetime < ymd("2022-02-01"), NA, pr)) |>
    mutate(tem_115 = ifelse(A4_TEM_115_0_K846TH < 14.5, NA, A4_TEM_115_0_K846TH), .keep = "unused") |>
    mutate(rh_115 = ifelse(A5_RH_115_0_K846TH < 50, NA, A5_RH_115_0_K846TH), .keep = "unused") |>
    rename(tem_007 = "A6_TEM_7_0_K846TH") |>
    rename(rh_007 = "A7_RH_7_0_K846TH")



# Plot
rdxklywind |>
     # fill(A7_RH_7_0_K846TH)
    pivot_longer(cols = where(is.numeric), names_to = "sensor", values_to = "value") |>
    mutate(sensor = as.factor(sensor)) |>
    ggplot(aes(x = datetime)) +
    geom_line(aes(y = value)) +     
    scale_x_datetime(date_labels = "%b-%Y") + 
    labs(y = "", x = "Time" ) +
    facet_wrap(~sensor, ncol = 1, scales = "free_y") 

# Corrplot

rdxklywind |>
    select(-datetime)|>
    remove_missing()|>
    cor(method = "pearson") |>
    corrplot(type = "lower", method = "circle", insig = 'blank', order = "hclust", diag = FALSE,  tl.col="black", tl.cex = 0.8, addCoef.col = 'black', number.cex = 0.6)


# ws_060 vs. ws_120
rdxklywind |>
    ggplot(aes(x = ws_060, y = ws_100)) +
    geom_point()

# ws_100 vs. ws_120
rdxklywind |>
    ggplot(aes(x = ws_100, y = ws_120)) +
    geom_point()
```

### Regressions to Fill Missing Values

```{r}
#| label: ws_filling_models

# Isolate Wind Speed data
ws <-
    rdxklywind |>
    select(datetime | contains("ws")) |>    
    mutate(ws_100 = ifelse(ws_100 < 1, NA, ws_100)) # Outliers removal
    
# ws Box-Cox Transformation
ws_060_bc_results <- calc_boxcox_trans(ws$ws_060)
ws_100_bc_results <- calc_boxcox_trans(ws$ws_100)
ws_120_bc_results <- calc_boxcox_trans(ws$ws_120)

ws_bc <- tibble(
    datetime = ws$datetime,
    ws_060_bc = ws_060_bc_results$x_bc,
    ws_100_bc = ws_100_bc_results$x_bc,
    ws_120_bc = ws_120_bc_results$x_bc
)

# Let's fill the best one: ws_060

# which(is.na(ws$ws_060) & !is.na(ws$ws_100))
lm_fit_ws_060_100 <- lm(ws_060_bc ~ ws_100_bc, data = ws_bc, na.action = na.exclude)

# which(is.na(ws$ws_060) & !is.na(ws$ws_120))
lm_fit_ws_060_120 <- lm(ws_060_bc ~ ws_120_bc, data = ws_bc, na.action = na.exclude)

# Fill ws_060
ws_bc <- 
    ws_bc |>
    mutate(ws_060_100_bc_pred = predict(lm_fit_ws_060_100, ws_bc)) |>
    mutate(ws_060_bc = coalesce(ws_060_bc, ws_060_100_bc_pred), .keep = "unused") |>
    mutate(ws_060_120_bc_pred = predict(lm_fit_ws_060_120, ws_bc)) |>
    mutate(ws_060_bc = coalesce(ws_060_bc, ws_060_120_bc_pred), .keep = "unused")

ws_bc |>
    pivot_longer(cols = where(is.numeric), names_to = "sensor", values_to = "value") |>
    mutate(sensor = as.factor(sensor)) |>
    ggplot(aes(x = datetime)) +
    geom_line(aes(y = value)) +     
    scale_x_datetime(date_labels = "%b-%Y") + 
    labs(y = "", x = "Time" ) +
    facet_wrap(~sensor, ncol = 1, scales = "free_y")

missing_dates <- unique(as.Date(ws_bc$datetime[(which(is.na(ws_bc$ws_060_bc)))]))
missing_dates

print(paste("There still are", 
            length(missing_dates), 
            "days with Missing Values."))

# Fill missing with t-24 hour value

ws_060_bc <- 
    ws_bc |>
    select(c(datetime, ws_060_bc)) |>
    rename(vals = ws_060_bc) |>
    mutate(Tag = strftime(date(datetime), format = "d%Y%m%d")) |>
    mutate(hhmm = strftime(datetime, format = "t%H%M", tz = "UTC")) 

# View(ws_060_bc[which(date(ws_060_bc$datetime) == date("2022-01-08")), ])

# For Pivot Wider:
# https://www.youtube.com/watch?v=UR-4vBEN3Fw
# https://www.youtube.com/watch?v=4-sqsCANxHU

# One row is one day
ws_060_bc_wide <-
    ws_060_bc |> 
    select(-datetime, -hhmm) |>
    group_by(Tag) |>
    mutate(row = row_number()) |>
    pivot_wider(names_from = Tag, values_from = vals) |>
    select(-row) |>
    t() |>
    as_tibble() |>
    mutate(Tag = as_date(unique(ws_060_bc$Tag), format = "d%Y%m%d")) |>
    relocate(Tag)
    
colnames(ws_060_bc_wide) <- c("Tag", unique(ws_060_bc$hhmm))
# View(ws_060_bc_wide)

# Filter cols with NA to check

# idx_dates_miss_wide <- which(ws_060_bc_wide$Tag %in% missing_dates)
# ws_060_bc_wide_missing <- ws_060_bc_wide[idx_dates_miss_wide, ]
# View(ws_060_bc_wide_missing)

ws_060_bc_wide <-
    ws_060_bc_wide |>
    fill(contains("t"))

ws_060_bc_long <-
    ws_060_bc_wide |>
    select(-Tag) |> 
    pivot_longer(cols = starts_with("t"), names_to = "time", values_to = "vals") |>
    mutate(datetime = ws_060_bc$datetime) |>
    select(-time) |>
    relocate(datetime)

# ws_060_bc is complete!

ws_bc <-
    ws_bc |>
    mutate(ws_060_bc = ws_060_bc_long$vals)

# Fill the others

# Fill ws_100
lm_fit_ws_100_060 <- lm(ws_100_bc ~ ws_060_bc, data = ws_bc, na.action = na.exclude)
ws_bc <- 
    ws_bc |>
    mutate(ws_100_060_bc_pred = predict(lm_fit_ws_100_060, ws_bc)) |>
    mutate(ws_100_bc = coalesce(ws_100_bc, ws_100_060_bc_pred), .keep = "unused")

# Fill ws_120
lm_fit_ws_120_100 <- lm(ws_120_bc ~ ws_100_bc, data = ws_bc, na.action = na.exclude)
ws_bc <- 
    ws_bc |>
    mutate(ws_120_100_bc_pred = predict(lm_fit_ws_120_100, ws_bc)) |>
    mutate(ws_120_bc = coalesce(ws_120_bc, ws_120_100_bc_pred), .keep = "unused")

# Inverse Box-Cox and Replace full columns

ws <-
 ws_bc |>
 mutate(ws_060 = inv_boxcox(ws_060_bc, ws_060_bc_results$lambda), .keep = "unused") |>
 mutate(ws_100 = inv_boxcox(ws_100_bc, ws_100_bc_results$lambda), .keep = "unused") |>
 mutate(ws_120 = inv_boxcox(ws_120_bc, ws_120_bc_results$lambda), .keep = "unused") 


rdxklywind <-
    rdxklywind |>
    mutate(ws_avg = (ws$ws_060 + ws$ws_100 + ws$ws_120)/3 , .keep = "unused") |>
    select(-ws_060, -ws_100, -ws_120)
    
# Corrplot
rdxklywind |>
    select(-datetime)|>
    remove_missing()|>
    cor(method = "pearson") |>
    corrplot(type = "lower", method = "circle", insig = 'blank', order = "hclust", diag = FALSE,  tl.col="black", tl.cex = 0.8, addCoef.col = 'black', number.cex = 0.6)

```

## Fill the Rest

```{r}
#| labels: fill the rest

rdxklywind <-
    rdxklywind |>
    mutate(pr = replace_na_with_median(pr)) |>
    fill(rh_007) |>
    mutate(rh_115 = replace_na_with_median(rh_115)) |>
    fill(tem_007) |>
    mutate(tem_115 = replace_na_with_median(tem_115))
```

## Power Output Calculation and Adding Wind Direction

```{r}

# Calculations

wind_10min <-
    rdxklywind |>
    mutate(rh_avg = (rh_007 + rh_115)/2 , .keep = "unused") |> 
    mutate(tem_avg = (tem_007 + tem_115)/2 , .keep = "unused") |>
    mutate(rho_h = calc_humid_air_density(tem_avg, rh_avg/100, pr)) |>
    mutate(p_out = calc_wt_output_power(rated_power = wt_rated_power,
                                        area = wt_area,
                                        power_coeff = Cp,
                                        cut_in = wt_ws_cut_in,
                                        cut_out = wt_ws_cut_out,
                                        air_density = rho_h,
                                        wind_speed = ws_avg)) 

# Add Avg. Wind Direction column (left join by datetime)

wind_10min <- left_join(wind_10min, wd, by = "datetime")

# Plot with facets

wind_10min |>
    pivot_longer(cols = where(is.numeric), names_to = "sensor", values_to = "value") |>
    # mutate(sensor = as.factor(sensor)) |>
    ggplot(aes(x = datetime)) +
    geom_line(aes(y = value)) +     
    scale_x_datetime(date_labels = "%b-%Y") + 
    labs(y = "", x = "Time" ) +
    facet_wrap(~sensor, ncol = 1, scales = "free_y")

```


### Power Output Hourly Aggregation

```{r}
library(xts)

#  Check: https://ggplot2.tidyverse.org/reference/cut_interval.html
# https://community.rstudio.com/t/create-bins-the-tidy-way/63492


wind_10min_xts <- xts::xts(wind_10min[, 2:ncol(wind_10min)], as.POSIXct(wind_10min$datetime))

ends <- xts::endpoints(wind_10min_xts, "hours")
ends <- ends + 1
ends[length(ends)] <- ends[length(ends)] - 1

wind_hourly_xts <- xts::period.apply(wind_10min_xts, ends, mean)

wind <- 
    wind_hourly_xts |>
    as_tibble() |>
    mutate(datetime = time(wind_hourly_xts)) |>    
    relocate(datetime) |>
    slice(2:n())

```

## Wind Roses 

```{r}
#| label: windroses
#| 

# Total

wind |>
    mutate(ws_avg_cat = cut_interval(ws_avg, 5)) |>
    ggplot(aes(x = wd, fill = ws_avg_cat)) +
    geom_histogram(binwidth = 15, boundary = -7.5, colour = "black", linewidth = .25) +
    guides(fill = guide_legend(reverse = TRUE)) +
    coord_polar() +
    scale_x_continuous(limits = c(0,360),
                       breaks = seq(0, 360, by = 45),
                       minor_breaks = seq(0, 360, by = 15)) +
    scale_fill_brewer() +
    labs(x = "Wind Direction (Deg.)", y = "", fill= 'Wind Speed\nInterval') +
    theme(axis.title.y = element_blank(),
          axis.text.y  = element_blank(), 
          axis.ticks.y = element_blank())



# Per Month
wind |>
    mutate(yymm = as.numeric(paste0(year(datetime), month(datetime)))) |>
    mutate(yy_mm = paste0(month(datetime, label = TRUE),"-", year(datetime))) |>
    mutate(ws_avg_cat = cut_interval(ws_avg, 5)) |>

    ggplot(aes(x = wd, fill = ws_avg_cat)) +
    geom_histogram(binwidth = 15, boundary = -7.5, colour = "black", linewidth = .25) +
    guides(fill = guide_legend(reverse = TRUE)) +
    coord_polar() +
    scale_x_continuous(limits = c(0,360),
                       breaks = seq(0, 360, by = 45),
                       minor_breaks = seq(0, 360, by = 15)) +
    scale_fill_brewer() +
    labs(x = "Wind Direction (Deg.)", y = "", fill= 'Wind Speed\nInterval') + 
    facet_wrap(~yymm, ncol = 5) + 
    theme(axis.title.y = element_blank(),
          axis.text.y  = element_blank(), 
          axis.ticks.y = element_blank())

```


# Capacity Factor for the Wind Park

## Selected Period: 2022

```{r}

wind |>
 select(datetime, ws_avg, p_out) |>
 pivot_longer(cols = where(is.numeric), names_to = "sensor", values_to = "value") |>
    # mutate(sensor = as.factor(sensor)) |>
    ggplot(aes(x = datetime)) +
    geom_line(aes(y = value)) +     
    scale_x_datetime(date_labels = "%b-%Y") + 
    labs(y = "", x = "Time" ) +
    facet_wrap(~sensor, ncol = 1, scales = "free_y")


# Wind Park Power 

power <- 
    wind |>
    select(datetime, p_out) |>
    mutate(kly_kW =  n_wind_turbines * p_out) |>
    mutate(hh = hour(datetime)) |>
    mutate(mm = month(datetime)) |>
    select(-p_out)

power$period <- NA
power$period[1:8760] <- 1
power$period[8761:nrow(power)] <- 2
power$period <- as.factor(power$period)


power |>
 select(-hh, -mm) |>
 pivot_longer(cols = where(is.numeric), names_to = "sensor", values_to = "value") |>
    # mutate(sensor = as.factor(sensor)) |>
    ggplot(aes(x = datetime)) +
    labs(title = "Kalayan 2 Output Power [MW]") +
    geom_line(aes(y = value/1000)) +     
    scale_x_datetime(date_labels = "%b-%Y") + 
    labs(y = "", x = "Time" ) +
    facet_wrap(~period, ncol = 1, scales = "free_y")


power_1 <- subset(power, period == 1)
power_2 <- subset(power, period == 2)
power_2022 <- subset(power, year(datetime) == 2022)

power_wide <- tibble(period_1 =  power_1$kly_kW,  
                     period_2 = NA,
                     period_2022 = power_2022$kly_kW)

power_wide$period_2[1:nrow(power_2)] <-  power_2$kly_kW

power_wide <-
    power_wide |>
    mutate(period_2 = coalesce(period_2, period_1)) |> 
    mutate(periods_avg = (period_1 + period_2)/2)


# Select 2022
kly_e_out <-
    power_wide |>
    select(period_2022) |>
    mutate(MW = period_2022 / 1000, .keep = "unused") |>
    arrange(desc(MW)) |>
    mutate(pu = MW / installed_capacity) |>
    mutate(dur = seq(1,n())) |>
    mutate(dur_perc = 100*dur / 8760)
    


# Projected Capacity Factor
# https://en.wikipedia.org/wiki/Capacity_factor


GWh_year_nameplate <- 8760 * installed_capacity
GWh_year <- sum(kly_e_out$MW)

capacity_factor <- GWh_year / GWh_year_nameplate

# Duration @ Rated power

dur_max_power <- length(which(kly_e_out$MW == installed_capacity))
dur_null_power <- length(which(kly_e_out$MW == 0))

# plot MW
kly_e_out |>
    ggplot(aes(x = dur, y = MW)) +
    
    labs(title = "Kalayan 2: Duration curve of theoretical output power",
         x = "1 Year Period - Duration [h]",
         y = "[MW]",
         caption = "Projected Capacity Factor overestimated: Power losses, forced and scheduled outages not included.") +   
    annotate("rect", 
             xmin = 0, xmax = dur_max_power, 
             ymin = 0, ymax = installed_capacity, 
             alpha = 0.2, 
             color = "green", 
             fill="green") +
    
    annotate("rect", 
             xmin = 8760 - dur_null_power, xmax = 8760, 
             ymin = 0, ymax = installed_capacity, 
             alpha = 0.2, 
             color = "red", 
             fill="red") +
    annotate("text", x = 8760/2, y = 2.5, , label = "Representative Year: 2022") +
    annotate("text", x = 6000, y = 80, label = paste("Capacity Factor = ", round(100*capacity_factor, 2), "%")) +
    geom_line() +
    scale_x_continuous(breaks = seq(0, nrow(kly_e_out), 1000)) +
    scale_y_continuous(breaks = seq(0, 100, 10))
    
    
# plot pu
kly_e_out |>
    ggplot(aes(x = dur_perc, y = pu)) +
    labs(
        title = "Kalayan 2: Duration curve of theoretical output power",
        x = "1 Year Period - Duration [%]",
        y = "[pu]",
        caption = "Projected Capacity Factor overestimated: Power losses, forced and scheduled outages not included.") +
    
    annotate("rect", 
             xmin = 0, 
             xmax = 100*dur_max_power/8760, 
             ymin = 0, 
             ymax = 1, alpha = 0.2, color = "green", fill="green") +
    annotate("rect", 
             xmin = 100*(1 - dur_null_power/8760), 
             xmax = 100, 
             ymin = 0, 
             ymax = 1, alpha = 0.2, color = "red", fill="red") +
    annotate("text", x = 50, y = 0.025, , label = "Representative Year: 2022") +
    annotate("text", x = 100*6000/8760, y = 80/installed_capacity, label = paste("Capacity Factor = ", round(100*capacity_factor, 2), "%")) +
    scale_x_continuous(breaks = seq(0, 100, 10)) +
    geom_line() +
    scale_y_continuous(breaks = seq(0, 1, 0.05))
```


## Probabilistic Density

Taking a two years period I'll estimate the Wind Speed distribution to have an indea of the probabilities of generating certain ammount of power.

```{r}









```


## How to calculate the humid air density?

It's important to keep all units within the **SI**, therefore I will convert the following units:

-   PR: Pressure \[mbar\] --\> \[Pa\]
-   TEM: Ambient Temperature \[°C\] --\> \[K\]

Code examples with the R package `convertr`:

```{r}
#| label: units
#| echo: false
#| warning: false
#| output: false
#| include: false


# Convert units to SI

klywind <- 
    klywind |>
    mutate(across(contains("PR"), ~ convertr::convert(., "mbar", "Pa"))) |>
    mutate(across(contains("TEM"), ~ convertr::convert(., "degC", "K")))

klywind |>
    select(contains("TEM")) |>
    glimpse()

```

**Temperature** $(T)$, **pressure** $(p)$ and **relative humidity** $(\phi)$ are important to calculate the **humid air density**[^1] $(\rho_h)$, which affects the output power $P_{out}$ of wind turbines; lower density means lower power output.

[^1]: The more water vapour in the air, the less is its total density; this seems counter-intuitive.

${\rho_h={\frac{p_d}{R_{d}T}} + {\frac{p_v}{R_{v}T}}={\frac {p_{\text{d}}M_d+p_{v}M_{v}}{RT}}}$

R, universal gas constant, 8.31446 J/(K·mol)

${p_{v}=\phi p_{sat}}$

where:

${p_{v}}$, vapor pressure of water

$\phi$, relative humidity (0.0–1.0)

$p_{sat}$, saturation vapor pressure

Tetens equation to calculate the saturation vapour pressure of water over liquid https://en.wikipedia.org/wiki/Tetens_equation

${p_{sat} = 6.1078\times \exp({\frac {17.5T}{T+237.3}})}$

where temperature $T$ is in degrees Celsius (°C) and saturation vapor pressure $p_{sat}$ is in kilopascals (kPa).

The partial pressure of dry air

${p_{d}}$ is found considering partial pressure, resulting in:

${p_{d}=p-p_{v}}$

where

$p$ simply denotes the observed absolute pressure.

## Wind Turbine Output Power

$P_{out} = C_p \frac{1}{2} \rho A v^3$