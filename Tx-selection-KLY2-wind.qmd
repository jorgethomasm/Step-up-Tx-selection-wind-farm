---
title: "Project Kalayaan 2 - 100 MW Wind Farm"
subtitle: "Probabilistic & Economic Selection of Step-up Transformers"
date: "`r Sys.Date()`"
author: Jorge Thomas
format:    
    html:
      self-contained: true
      code-fold: true      
      df-print: tibble
      code-summary: "Show the code"
      grid: 
        margin-width: 350px
reference-location: margin 
bibliography: references.bib
---

::: {#fig-intro layout-ncol="1"}
![Credit: Siemens Gamesa](./imgs/Balaoi-Caunayan-Wind-Farm.webp){width="100%"}

The Balaoi & Caunayan Wind Farm is an 160 MW onshore project located in the province of Ilocos Norte, Philippines.
:::

```{r}
#| label: setup
#| include: false
#| warning: false

# library(convertr) # https://cran.r-project.org/web/packages/convertr/convertr.pdf
library(tictoc)
library(tidyverse)
library(corrplot)

library(infotheo)
library(tidymodels)
tidymodels_prefer()
library(glmnet)


source("./tools/jthomfuncs.r")
source("./tools/jthomfuncs_wind.r")

theme_set(jthomggtheme)

# ====== Wind Turbine Specs ======

# Manufacturer: Goldwin
# Model: GW 165-6.0 6300 

# Variable Speed - Variable pitch

wt_area <- 21382 # squared metres
wt_hub_height <- 100 # metres
Cp <- 0.45
wt_rotor_diam <- 165 # metres

wt_ws_cut_in <- 3 # m/s
wt_ws_cut_out <- 24 # m/s

v_tan <- 92 # m/s For TSR (Tip-Speed Ratio, lambda) calc.
```

# On-Site Wind Profile

On June the 30<sup>th</sup> of 2021 began the measuring campaign for collecting on-site wind speed and other important weather-related variables with a 10-min step resolution.

There are 61 variables named:

```{r}
#| label: extract
#| echo: false
#| warning: false
#| output: true

klywind <- read_csv("./data/metmast_01_21-months.csv", show_col_types = FALSE)

klywind <- 
    klywind |>
    rename_with(~ str_remove_all(., "\\[.*\\]|\\s+")) |>
    rename_with(~ str_replace_all(., "-", "_" )) |>
    slice(-(1:50)) # Start exactly at 2021-07-01 00:00

klywind |>
    select(-datetime)|>
    colnames()
```

`Speed120msyn`, `Speed110msyn` and `WS120mCompFILLED120mSyn` seem to be created.

Abbreviations of the original sensor data indicate the following:

-   WS: Wind Speed \[m/s\]
-   PR: Pressure \[mbar\]
-   WD: Wind Direction \[°\]
-   RH: Relative Humidity \[%\]
-   TEM: Ambient Temperature \[°C\]

## Check Data Integrity: Missing Values

```{r}
#| label: missing_values
#| echo: false
#| warning: false
#| output: true

klywind |>
    count_na() |>
    knitr::kable()
```

Only `WS120mCompFILLED120mSyn` is complete, which makes sense given its name.

If calculations are done at 120 metres, the theoretical wind power output will be overestimated!

Mastils of wind turbines are 100 metres high. However, with a rotor diameter of 165 metres the total height from blade tip is 182.92 metres.

The minimum distance from tip to ground would be $100 - 82.5 = 17.5 m$

This means that the best measurement of wind speed for the total **air parcel** is the Avg. of all sensors installed at different heights.

### Wind Speed - Raw Data

```{r}
#| label: raw_plot_ws
#| echo: false
#| warning: false
#| output: true
#| fig-width: 6
#| fig-height: 6

klywind |> 
    select(datetime | contains("WS") & !contains(c("Min", "Max", "STDev", "TI30"))) |> 
    pivot_longer(cols = contains("WS"), names_to = "WS_sensor", values_to = "WindSpeed") |>
    mutate(WS_sensor = as.factor(WS_sensor)) |>
    ggplot(aes(x = datetime)) +
    geom_line(aes(y = WindSpeed)) +     
    scale_x_datetime(date_labels = "%b-%Y") + 
    labs(y = "Wind\nSpeed\n[m/s]", x = "Time" ) +
    facet_wrap(~WS_sensor, ncol = 1)
```

### Wind Direction - Raw Data

```{r}
#| label: ts_plots
#| echo: false
#| warning: false
#| output: true
#| fig-width: 6
#| fig-height: 6

klywind |> 
    select(datetime | contains("WD") & !contains(c("Min", "Max", "STDev", "TI30"))) |> 
    pivot_longer(cols = contains("WD"), names_to = "WD_sensor", values_to = "WindDirection") |>
    mutate(WD_sensor = as.factor(WD_sensor)) |>
    ggplot(aes(x=datetime)) +
    geom_line(aes(y=WindDirection)) +     
    scale_x_datetime(date_labels = "%b-%Y") + 
    labs(y = "Wind\nDirection\n[Deg.]", x = "Time" ) +
    facet_wrap(~WD_sensor, ncol = 1) 

# Definitive ready for Wind Rose Plot:

wd <-
    klywind |> 
    select(datetime | contains("WD") & !contains(c("Min", "Max", "STDev"))) |>
    slice(-(1:77)) |>
    mutate(A2_WD_97_150_0_5V = coalesce(A2_WD_97_150_0_5V, A3_WD_57_150_0_5V), .keep = "all") |>
    mutate(A1_WD_117_150_0_5V = coalesce(A1_WD_117_150_0_5V, A2_WD_97_150_0_5V), .keep = "all") |>
    mutate(wd = (A3_WD_57_150_0_5V + A2_WD_97_150_0_5V + A1_WD_117_150_0_5V)/3, .keep = "all") |>
    select(c(datetime, wd))


```

### Temperature - Raw Data

```{r}
#| label: ts_plots
#| echo: false
#| warning: false
#| output: true
#| fig-width: 6
#| fig-height: 6

klywind |> 
    select(datetime | contains("TEM") & !contains(c("Min", "Max", "STDev", "TI30"))) |> 
    pivot_longer(cols = contains("TEM"), names_to = "TEM_sensor", values_to = "Temperature") |>
    mutate(TEM_sensor = as.factor(TEM_sensor)) |>
    ggplot(aes(x=datetime)) +
    geom_line(aes(y=Temperature)) +     
    scale_x_datetime(date_labels = "%b-%Y") + 
    labs(y = "Temp\n[degC]", x = "Time" ) +
    facet_wrap(~TEM_sensor, ncol = 1) 

```

### Pressure - Raw Data

```{r}
#| label: ts_plots
#| echo: false
#| warning: false
#| output: true
#| fig-width: 6
#| fig-height: 6

klywind |> 
    select(datetime | contains("PR") & !contains(c("Min", "Max", "STDev", "TI30"))) |> 
    pivot_longer(cols = contains("PR"), names_to = "PR_sensor", values_to = "Pressure") |>
    mutate(PR_sensor = as.factor(PR_sensor)) |>
    ggplot(aes(x=datetime)) +
    geom_line(aes(y=Pressure)) +     
    scale_x_datetime(date_labels = "%b-%Y") + 
    labs(y = "Pressure\n[mbar]", x = "Time" ) +
    facet_wrap(~PR_sensor, ncol = 1) 
```

### Relative Humidity - Raw Data

```{r}
#| label: ts_plots
#| echo: false
#| warning: false
#| output: true
#| fig-width: 6
#| fig-height: 6

klywind |> 
    select(datetime | contains("RH") & !contains(c("Min", "Max", "STDev", "TI30"))) |> 
    pivot_longer(cols = contains("RH"), names_to = "RH_sensor", values_to = "rh") |>
    mutate(RH_sensor = as.factor(RH_sensor)) |>
    ggplot(aes(x=datetime)) +
    geom_line(aes(y=rh)) +     
    scale_x_datetime(date_labels = "%b-%Y") + 
    labs(y = "RH\n[%]", x = "Time" ) +
    facet_wrap(~RH_sensor, ncol = 1) 
```



```{r}
#| label: coalesce_rm_outliers 

rdxklywind <- 
    klywind |> 
    select(datetime | !contains(c("WD", "Min", "Max", "STDev", "TI30", "Syn"))) |>
    mutate(ws_120 = coalesce(F2_WS_120_B_150_TFCA, F1_WS_120_A_330_TFCA), .keep = "unused") |> 
    mutate(ws_100 = coalesce(F3_WS_100_A_330_TFCA, F4_WS_100_B_150_TFCA), .keep = "unused") |> 
    mutate(ws_060 = coalesce(F6_WS_60_B_150_TFCA, F5_WS_60_A_330_TFCA), .keep = "unused") |> 
    mutate(pr = ifelse(F7_PR_7_0_K611PB < 890, NA, F7_PR_7_0_K611PB), .keep = "unused") |>
    mutate(pr = ifelse(pr < 931 & datetime < ymd("2022-02-01"), NA, pr)) |>
    mutate(tem_115 = ifelse(A4_TEM_115_0_K846TH < 14.5, NA, A4_TEM_115_0_K846TH), .keep = "unused") |>
    mutate(rh_115 = ifelse(A5_RH_115_0_K846TH < 50, NA, A5_RH_115_0_K846TH), .keep = "unused") |>
    rename(tem_007 = "A6_TEM_7_0_K846TH") |>
    rename(rh_007 = "A7_RH_7_0_K846TH")



# Plot
rdxklywind |>
     # fill(A7_RH_7_0_K846TH)
    pivot_longer(cols = where(is.numeric), names_to = "sensor", values_to = "value") |>
    mutate(sensor = as.factor(sensor)) |>
    ggplot(aes(x = datetime)) +
    geom_line(aes(y = value)) +     
    scale_x_datetime(date_labels = "%b-%Y") + 
    labs(y = "", x = "Time" ) +
    facet_wrap(~sensor, ncol = 1, scales = "free_y") 

# Corrplot

rdxklywind |>
    select(-datetime)|>
    remove_missing()|>
    cor(method = "pearson") |>
    corrplot(type = "lower", method = "circle", insig = 'blank', order = "hclust", diag = FALSE,  tl.col="black", tl.cex = 0.8, addCoef.col = 'black', number.cex = 0.6)


# ws_060 vs. ws_120
rdxklywind |>
    ggplot(aes(x = ws_060, y = ws_100)) +
    geom_point()

# ws_100 vs. ws_120
rdxklywind |>
    ggplot(aes(x = ws_100, y = ws_120)) +
    geom_point()
```


```{r}
#| label: ws_filling_models

# Isolate Wind Speed data
ws <-
    rdxklywind |>
    select(datetime | contains("ws")) |>    
    mutate(ws_100 = ifelse(ws_100 < 1, NA, ws_100)) # Outliers removal
    
# ws Box-Cox Transformation
ws_060_bc_results <- calc_boxcox_trans(ws$ws_060)
ws_100_bc_results <- calc_boxcox_trans(ws$ws_100)
ws_120_bc_results <- calc_boxcox_trans(ws$ws_120)

ws_bc <- tibble(
    datetime = ws$datetime,
    ws_060_bc = ws_060_bc_results$x_bc,
    ws_100_bc = ws_100_bc_results$x_bc,
    ws_120_bc = ws_120_bc_results$x_bc
)

# Let's fill the best one: ws_060

# which(is.na(ws$ws_060) & !is.na(ws$ws_100))
lm_fit_ws_060_100 <- lm(ws_060_bc ~ ws_100_bc, data = ws_bc, na.action = na.exclude)

# which(is.na(ws$ws_060) & !is.na(ws$ws_120))
lm_fit_ws_060_120 <- lm(ws_060_bc ~ ws_120_bc, data = ws_bc, na.action = na.exclude)

# Fill ws_060
ws_bc <- 
    ws_bc |>
    mutate(ws_060_100_bc_pred = predict(lm_fit_ws_060_100, ws_bc)) |>
    mutate(ws_060_bc = coalesce(ws_060_bc, ws_060_100_bc_pred), .keep = "unused") |>
    mutate(ws_060_120_bc_pred = predict(lm_fit_ws_060_120, ws_bc)) |>
    mutate(ws_060_bc = coalesce(ws_060_bc, ws_060_120_bc_pred), .keep = "unused")

ws_bc |>
    pivot_longer(cols = where(is.numeric), names_to = "sensor", values_to = "value") |>
    mutate(sensor = as.factor(sensor)) |>
    ggplot(aes(x = datetime)) +
    geom_line(aes(y = value)) +     
    scale_x_datetime(date_labels = "%b-%Y") + 
    labs(y = "", x = "Time" ) +
    facet_wrap(~sensor, ncol = 1, scales = "free_y")

missing_dates <- unique(as.Date(ws_bc$datetime[(which(is.na(ws_bc$ws_060_bc)))]))
missing_dates

print(paste("There still are", 
            length(missing_dates), 
            "days with Missing Values."))

# Fill missing with t-24 hour value

ws_060_bc <- 
    ws_bc |>
    select(c(datetime, ws_060_bc)) |>
    rename(vals = ws_060_bc) |>
    mutate(Tag = strftime(date(datetime), format = "d%Y%m%d")) |>
    mutate(hhmm = strftime(datetime, format = "t%H%M", tz = "UTC")) 

View(ws_060_bc[which(date(ws_060_bc$datetime) == date("2022-01-08")), ])

# One row is one day
ws_060_bc_wide <-
    ws_060_bc |> 
    select(-datetime, -hhmm) |>
    group_by(Tag) |>
    mutate(row = row_number()) |>
    pivot_wider(names_from = Tag, values_from = vals) |>
    select(-row) |>
    t() |>
    as_tibble() |>
    mutate(Tag = as_date(unique(ws_060_bc$Tag), format = "d%Y%m%d")) |>
    relocate(Tag)
    
colnames(ws_060_bc_wide) <- c("Tag", unique(ws_060_bc$hhmm))
# View(ws_060_bc_wide)

# Filter cols with NA to check

# idx_dates_miss_wide <- which(ws_060_bc_wide$Tag %in% missing_dates)
# ws_060_bc_wide_missing <- ws_060_bc_wide[idx_dates_miss_wide, ]
# View(ws_060_bc_wide_missing)

ws_060_bc_wide <-
    ws_060_bc_wide |>
    fill(contains("t"))

ws_060_bc_long <-
    ws_060_bc_wide |>
    select(-Tag) |> 
    pivot_longer(cols = starts_with("t"), names_to = "time", values_to = "vals") |>
    mutate(datetime = ws_060_bc$datetime) |>
    select(-time) |>
    relocate(datetime)

# ws_060_bc is complete!

# Fill the others




```


```{r}

# Fill ws_100 in function of ws_120 
lm_fit_ws_100_120 <- lm(ws_100_bc ~ ws_120_bc, data = ws_bc, na.action = na.exclude)
# which(is.na(ws$ws_100) & !is.na(ws$ws_120))

# Fill ws_120 in function of ws_100 
lm_fit_ws_120_100 <- lm(ws_120_bc ~ ws_100_bc, data = ws_bc, na.action = na.exclude)
# which(is.na(ws$ws_120) & !is.na(ws$ws_100))

# Fill ws_100 in function of ws_060 
lm_fit_ws_100_060 <- lm(ws_100_bc ~ ws_060_bc, data = ws_bc, na.action = na.exclude)
# which(is.na(ws$ws_100) & !is.na(ws$ws_060))

ws_bc <- 
    ws_bc |>
    mutate(ws_100_bc_pred = predict(lm_fit_ws_100_120, ws_bc)) |>
    mutate(ws_100_bc = coalesce(ws_100_bc, ws_100_bc_pred), .keep = "unused") |>

    mutate(ws_120_bc_pred = predict(lm_fit_ws_120_100, ws_bc)) |>
    mutate(ws_120_bc = coalesce(ws_120_bc, ws_120_bc_pred), .keep = "unused") |>

    mutate(ws_100_bc_pred_2 = predict(lm_fit_ws_100_060, ws_bc)) |>
    mutate(ws_100_bc = coalesce(ws_100_bc, ws_100_bc_pred_2), .keep = "unused")

# Fill AGAIN ws_120 in function of ws_100 (already filled with ws_060)
lm_fit_ws_120_100_part_2 <- lm(ws_120_bc ~ ws_100_bc, data = ws_bc, na.action = na.exclude)

ws_bc <- 
    ws_bc |>
    mutate(ws_120_bc_pred_2 = predict(lm_fit_ws_120_100_part_2, ws_bc)) |>
    mutate(ws_120_bc = coalesce(ws_120_bc, ws_120_bc_pred_2), .keep = "unused")

# Instpect ws_060
# which(is.na(ws_bc$ws_060_bc) & !is.na(ws_bc$ws_100_bc))

# Fill ws_060 in function of ws_100 
lm_fit_ws_060_100 <- lm(ws_060_bc ~ ws_100_bc, data = ws_bc, na.action = na.exclude)

ws_bc <- 
    ws_bc |>
    mutate(ws_060_bc_pred = predict(lm_fit_ws_060_100, ws_bc)) |>
    mutate(ws_060_bc = coalesce(ws_060_bc, ws_060_bc_pred), .keep = "unused")

length(which((is.na(ws_bc$ws_100_bc))))
752
# Inverse Box-Cox

ws <- 
    ws_bc |>
    mutate(ws_060 = inv_boxcox(ws_060_bc, ws_060_bc_results$lambda), .keep = "unused") |>
    mutate(ws_100 = inv_boxcox(ws_100_bc, ws_100_bc_results$lambda), .keep = "unused") |>
    mutate(ws_120 = inv_boxcox(ws_120_bc, ws_120_bc_results$lambda), .keep = "unused") |>
    mutate(hour = hour(datetime)) |>
    mutate(day = day(datetime)) |>
    mutate(week = week(datetime)) |>
    mutate(month = month(datetime)) 

idx_NA <- which(is.na(ws$ws_060))
unique(date(ws$datetime[idx_NA]))

rdxklywind <-
    rdxklywind |>
    select(-datetime & !contains("ws")) |>
    bind_cols(ws)


calc_mi_score(rdxklywind, "ws_100")


ws_060_rec <-
    recipe(tem_007 ~ ., data = rdxklywind) |>
    step_impute_bag(ws_060, 
                    impute_with = imp_vars(pr, tem_115, tem_007, rh_007),
                    seed_val = 1982)

ws_060_imputed <- ws_060_rec |> prep() |> bake(new_data = NULL)

ws_060_imputed$ws_060[idx_NA]

test <- ws_060_imputed[idx_NA, ]
View(test)
test |>
    
     # fill(A7_RH_7_0_K846TH)
    pivot_longer(cols = where(is.numeric), names_to = "sensor", values_to = "value") |>
    mutate(sensor = as.factor(sensor)) |>
    ggplot(aes(x = datetime)) +
    geom_point(aes(y = value)) +     
    scale_x_datetime(date_labels = "%b-%Y") + 
    labs(y = "", x = "Time" ) +
    facet_wrap(~sensor, ncol = 1, scales = "free_y") 


# Corrplot

rdxklywind |>
    select(-datetime)|>
    remove_missing()|>
    cor(method = "pearson") |>
    corrplot(type = "lower", method = "circle", insig = 'blank', order = "hclust", diag = FALSE,  tl.col="black", tl.cex = 0.8, addCoef.col = 'black', number.cex = 0.6)







ws_060_test_1 <- ws[which(is.na(ws$ws_060) & !is.na(ws$ws_100) & !is.na(ws$ws_120)), ]

# TRAIN / TEST (PRED) SPLIT
ws_train <- ws |> remove_missing()

# Histograms
ws_train |>   
    select(-datetime) |>
    pivot_longer(cols = everything(), names_to = "WS_sensor", values_to = "WindSpeed") |>
    mutate(WS_sensor = factor(WS_sensor, levels = c("ws_060", "ws_100", "ws_120", "ws_060_bc", "ws_100_bc", "ws_120_bc"))) |>
    ggplot(aes(x = WindSpeed)) +
    geom_histogram(bins = 50, color = "grey", fill = "lightgrey", alpha = 0.5) + 
    labs(x = "Wind Speed [m/s]") +
    scale_x_continuous(breaks = seq(0, 35, 5)) +  
    facet_wrap(~WS_sensor, nrow = 2) 

# The Bootstrap: for assessment of test error ----
set.seed(1982)
ws_train_boots_060 <- bootstraps(ws_train, times = 1000, strata = ws_060_bc)

set.seed(1982)
ws_train_boots_100 <- bootstraps(ws_train, times = 1000, strata = ws_100_bc)

set.seed(1982)
ws_train_boots_120 <- bootstraps(ws_train, times = 1000, strata = ws_120_bc)

# lm Recipes:
lm_rec_ws060 <-
  recipe(ws_060_bc ~ ., data = ws_train) |>
  update_role(datetime, new_role = "timestamp") |>
  update_role(ws_060, new_role = "orignal") |>
  update_role(ws_100, new_role = "orignal") |>
  update_role(ws_120, new_role = "orignal")
  
lm_rec_ws100 <-
  recipe(ws_100_bc ~ ., data = ws_train) |>
  update_role(datetime, new_role = "timestamp") |>
  update_role(ws_060, new_role = "orignal") |>
  update_role(ws_100, new_role = "orignal") |>
  update_role(ws_120, new_role = "orignal")

lm_rec_ws120 <-
  recipe(ws_120_bc ~ ., data = ws_train) |>
  update_role(datetime, new_role = "timestamp") |>
  update_role(ws_060, new_role = "orignal") |>
  update_role(ws_100, new_role = "orignal") |>
  update_role(ws_120, new_role = "orignal")

# Model Spec: LM -------------
lm_spec <-
  linear_reg() |> 
  set_engine("lm") |>
  set_mode("regression")   

lm_wf_ws060 <- workflow() |> add_recipe(lm_rec_ws060) |> add_model(lm_spec)
lm_wf_ws100 <- workflow() |> add_recipe(lm_rec_ws100) |> add_model(lm_spec)
lm_wf_ws120 <- workflow() |> add_recipe(lm_rec_ws120) |> add_model(lm_spec)

# === Test Error Estimations ===

# ------ WS 60 Metres ------
tic()
set.seed(1982)
doParallel::registerDoParallel()
lm_testing_fit_ws060 <- fit_resamples(lm_wf_ws060, resamples = ws_train_boots)
toc()
lm_testing_fit_ws060 |> collect_metrics(summarize = TRUE)

# ------ WS 100 Metres ------
tic()
set.seed(1982)
doParallel::registerDoParallel()
lm_testing_fit_ws100 <- fit_resamples(lm_wf_ws100, resamples = ws_train_boots)
toc()
lm_testing_fit_ws100 |> collect_metrics(summarize = TRUE)

# ------ WS 120 Metres ------
tic()
set.seed(1982)
doParallel::registerDoParallel()
lm_testing_fit_ws120 <- fit_resamples(lm_wf_ws120, resamples = ws_train_boots)
toc()
lm_testing_fit_ws120 |> collect_metrics(summarize = TRUE)

# === FINAL FITS ===

lm_fit_ws060 <- lm_wf_ws060 |> fit(ws_train)
lm_fit_ws100 <- lm_wf_ws100 |> fit(ws_train)
lm_fit_ws120 <- lm_wf_ws120 |> fit(ws_train)

# Add predictions


ws_060_test_2 <- ws[which(is.na(ws$ws_060) & !is.na(ws$ws_120)), ]

ws_100_test <- ws[which(is.na(ws$ws_100)), ]
ws_120_test <- ws[which(is.na(ws$ws_120)), ]

ws_060_pred <- inv_boxcox(predict(lm_fit_ws060, ws_train), ws_060_bc_results$lambda)

ws <-
  ws |>
  predict(lm_fit_ws100, ws_train_bc) |>
  mutate(ws_100_pred = inv_boxcox(.pred, ws_100_bc_results$lambda), .keep = "all")

ws <-
  ws |>
  predict(lm_fit_ws120, ws_train_bc) |>
  mutate(ws_120_pred = inv_boxcox(.pred, ws_120_bc_results$lambda), .keep = "all")

glimpse(ws)




# klywind_ws |>
#     select(-datetime)|>
#     cor(method = "pearson") |>
#     corrplot(type = "lower", method = "circle", insig = 'blank', order = "hclust", diag = FALSE,  tl.col="black", tl.cex = 0.8, addCoef.col = 'black', number.cex = 0.6)


# klywind_ws |>
#     select(-datetime) |>
#     pivot_longer(cols = everything(), names_to = "WS_sensor", values_to = "WindSpeed") |>
#     mutate(WS_sensor = as.factor(WS_sensor)) |>
#     ggplot(aes(x = ws)) +
#     geom_histogram(bins = 50, color = "lightgrey", fill = "lightgrey") + 
#     labs(x = "Wind Speed [m/s]") +
#     scale_x_continuous(breaks = seq(0, 35, 5)) +  
#     facet_wrap(~WS_sensor)  

    # mutate(ws_120 = (F1_WS_120_A_330_TFCA + F2_WS_120_B_150_TFCA)/2, .keep = "unused") |> 
    # mutate(ws_100 = (F3_WS_100_A_330_TFCA + F4_WS_100_B_150_TFCA)/2, .keep = "unused") |> 
    # mutate(ws_60 = (F5_WS_60_A_330_TFCA + F6_WS_60_B_150_TFCA)/2, .keep = "unused") 




```
It's important to keep all units within the **SI**, therefore I will convert the following units:

-   PR: Pressure \[mbar\] --\> \[Pa\]
-   TEM: Ambient Temperature \[°C\] --\> \[K\]

```{r}
#| label: units
#| echo: false
#| warning: false
#| output: true

# Convert units to SI

klywind <- 
    klywind |>
    mutate(across(contains("PR"), ~ convertr::convert(., "mbar", "Pa"))) |>
    mutate(across(contains("TEM"), ~ convertr::convert(., "degC", "K")))

klywind |>
    select(contains("TEM")) |>
    glimpse()

```

**Temperature** $(T)$, **pressure** $(p)$ and **relative humidity** $(\phi)$ are important to calculate the **humid air density**[^1] $(\rho_h)$, which affects the output power $P_{out}$ of wind turbines; lower density means lower power output.

[^1]: The more water vapour in the air, the less is its total density; this seems counter-intuitive.

${\rho_h={\frac{p_d}{R_{d}T}} + {\frac{p_v}{R_{v}T}}={\frac {p_{\text{d}}M_d+p_{v}M_{v}}{RT}}}$

R, universal gas constant, 8.31446 J/(K·mol)

${p_{v}=\phi p_{sat}}$

where:

${p_{v}}$, vapor pressure of water

$\phi$, relative humidity (0.0–1.0)

$p_{sat}$, saturation vapor pressure

Tetens equation to calculate the saturation vapour pressure of water over liquid https://en.wikipedia.org/wiki/Tetens_equation

${p_{sat} = 6.1078\times \exp({\frac {17.5T}{T+237.3}})}$

where temperature $T$ is in degrees Celsius (°C) and saturation vapor pressure $p_{sat}$ is in kilopascals (kPa).

The partial pressure of dry air

${p_{d}}$ is found considering partial pressure, resulting in:

${p_{d}=p-p_{v}}$

where

$p$ simply denotes the observed absolute pressure.

## Wind Turbine Output Power

$P_{out} = C_p \frac{1}{2} \rho A v^3$